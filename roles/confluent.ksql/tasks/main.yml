---
- include_role:
    name: confluent.common
  when: not common_role_completed|bool
  tags: common

- name: Gather OS Facts
  setup:
    # Only gathers items in list, filters out the rest
    filter: "{{item}}"
    gather_subset:
      - '!all'
  loop:
    - ansible_os_family
    - ansible_fqdn

- name: Stop Service and Remove Packages on Version Change
  include_role:
    name: confluent.common
    tasks_from: remove_packages.yml
  vars:
    service_name: "{{ ksql_service_name }}"
  when: installation_method == "package"
  tags: package

# Install Packages
- name: Install the KSQL Packages
  yum:
    name: "{{ ksql_packages | product([confluent_package_redhat_suffix]) | map('join') | list }}"
    state: latest
  when:
    - ansible_os_family == "RedHat"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: package
  notify: restart ksql

- name: Install the KSQL Packages
  apt:
    name: "{{ ksql_packages | product([confluent_package_debian_suffix]) | map('join') | list }}"
  when:
    - ansible_os_family == "Debian"
    - installation_method == "package"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: package
  notify: restart ksql

# Configure environment
- name: Create Ksql Group
  group:
    name: "{{ksql_group}}"

- name: Create Ksql User
  user:
    name: "{{ksql_user}}"
    comment: "Connect Distributed User"
    system: true
    group: "{{ksql_group}}"
  when: privileged_install|bool

- name: Set Ksql streams dir permissions
  file:
    path: "{{ksql_final_properties['ksql.streams.state.dir']}}"
    owner: "{{ksql_user}}"
    group: "{{ksql_group}}"
    state: directory
    mode: 0750
  when: privileged_install|bool

# Archive File deployments need to create SystemD service units
# Copy the tarball's systemd service to the system
- name: Copy Ksql Service from archive file to system
  copy:
    src: "{{binary_base_path}}/lib/systemd/system/{{ksql.systemd_file|basename}}"
    remote_src: true
    dest: "{{ksql.systemd_file}}"
    mode: "{{ omit if not privileged_install else '0644' }}"
    force: true
  when: installation_method == "archive"

- include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{ksql_truststore_storepass}}"
    truststore_path: "{{ksql_truststore_path}}"
    keystore_path: "{{ksql_keystore_path}}"
    keystore_storepass: "{{ksql_keystore_storepass}}"
    keystore_keypass: "{{ksql_keystore_keypass}}"
    service_name: ksql
    user: "{{ksql_user}}"
    group: "{{ksql_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host, hostname|default(omit)] | unique }}"
    ca_cert_path: "{{ksql_ca_cert_path}}"
    cert_path: "{{ksql_cert_path}}"
    key_path: "{{ksql_key_path}}"
    export_certs: "{{ksql_export_certs}}"
  when: >
    ksql_ssl_enabled|bool or
    ( kafka_broker_listeners[ksql_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool and not public_certificates_enabled|bool ) or
    ( mds_tls_enabled|bool and not public_certificates_enabled|bool ) or
    ( 'schema_registry' in groups and schema_registry_ssl_enabled|bool )
  tags: ssl

- name: Import Public Confluent Cloud Certificates Authority Certs into Truststore
  # Only necessary if there is a truststore, otherwise case rely on Java default CAs
  include_tasks: ccloud_certs.yml
  when: >
    ( ccloud_kafka_enabled|bool or ccloud_schema_registry_enabled|bool ) and
    ( ksql_ssl_enabled|bool or
    ( kafka_broker_listeners[ksql_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool and not public_certificates_enabled|bool ) or
    ( mds_tls_enabled|bool and not public_certificates_enabled|bool ) )
  tags: ssl

- name: Configure Kerberos
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{ksql_group}}"
    kerberos_user: "{{ksql_user}}"
    kerberos_keytab_path: "{{ksql_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{ksql_keytab_path}}"
    kerberos_handler: "restart ksql"
  when: (kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI') or (kafka_broker_listeners[ksql_processing_log_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' and ksql_log_streaming_enabled | bool)

- name: Copy Custom KSQL Files
  include_role:
    name: confluent.common
    tasks_from: copy_files.yml
  vars:
    copy_files: "{{ksql_copy_files}}"
    user: "{{ksql_user}}"
    group: "{{ksql_group}}"
  when: ksql_copy_files | length > 0

- name: Configure RBAC
  include_tasks: rbac.yml
  when: rbac_enabled|bool

- name: Create Ksql Config directory
  file:
    path: "{{ ksql.config_file | dirname }}"
    state: directory
    mode: 0750
    owner: "{{ksql_user}}"
    group: "{{ksql_group}}"
  when: privileged_install|bool

- name: Create Ksql Config with Secrets Protection
  include_role:
    name: confluent.common
    tasks_from: secrets_protection.yml
  vars:
    encrypt_passwords: "{{ ksql_secrets_protection_encrypt_passwords }}"
    properties: "{{ ksql_secrets_protection_encrypt_properties }}"
    config_path: "{{ ksql.config_file }}"
    config_template: ksql-server.properties.j2
    secrets_file: "{{ ksql_secrets_protection_file }}"
    secrets_file_owner: "{{ ksql_user }}"
    secrets_file_group: "{{ ksql_group }}"
    handler: restart ksql
  when: ksql_secrets_protection_enabled|bool

- name: Create Ksql Config
  template:
    src: ksql-server.properties.j2
    dest: "{{ksql.config_file}}"
    mode: "{{ omit if not privileged_install else '0640' }}"
    owner: "{{ omit if not privileged_install else ksql_user }}"
    group: "{{ omit if not privileged_install else ksql_group }}"
  notify: restart ksql
  when: not ksql_secrets_protection_enabled|bool

- name: Create Logs Directory
  file:
    path: "{{ksql_log_dir}}"
    state: directory
    group: "{{ksql_group}}"
    owner: "{{ksql_user}}"
    mode: 0770
  when: privileged_install|bool

- name: Create log4j Directory
  file:
    path: "{{ksql.log4j_file | dirname}}"
    owner: "{{ksql_user}}"
    group: "{{ksql_group}}"
    state: directory
    mode: 0750
  when: privileged_install|bool

- name: Create Ksql log4j Config
  template:
    src: ksql-server_log4j.properties.j2
    dest: "{{ksql.log4j_file}}"
    mode: "{{ omit if not privileged_install else '0640' }}"
    owner: "{{ omit if not privileged_install else ksql_user }}"
    group: "{{ omit if not privileged_install else ksql_group }}"
  when: ksql_custom_log4j|bool
  notify: restart ksql

- name: Create Ksql Jolokia Config
  template:
    src: ksql_jolokia.properties.j2
    dest: "{{ksql_jolokia_config}}"
    mode: "{{ omit if not privileged_install else '0640' }}"
    owner: "{{ omit if not privileged_install else ksql_user }}"
    group: "{{ omit if not privileged_install else ksql_group }}"
  when: ksql_jolokia_enabled|bool
  notify: restart ksql

- name: Create RocksDB Directory
  file:
    path: "{{ksql_rocksdb_path}}"
    group: "{{ksql_group}}"
    owner: "{{ksql_user}}"
    mode: 0750
    state: directory
  when: ksql_rocksdb_path != "" and privileged_install|bool

- name: Set Permission to RocksDB Files
  file:
    path: "{{ksql_rocksdb_path}}"
    group: "{{ksql_group}}"
    owner: "{{ksql_user}}"
    recurse: true
  when: ksql_rocksdb_path != "" and privileged_install|bool

- name: Deploy JMX Exporter Config File
  copy:
    src: "{{ksql_jmxexporter_config_source_path}}"
    dest: "{{ksql_jmxexporter_config_path}}"
    mode: "{{ omit if not privileged_install else '0640' }}"
    owner: "{{ omit if not privileged_install else ksql_user }}"
    group: "{{ omit if not privileged_install else ksql_group }}"
  when: ksql_jmxexporter_enabled|bool

- name: Create Basic Auth Jaas File
  template:
    src: jaas.conf.j2
    dest: "{{ksql.jaas_file}}"
    mode: 0640
    owner: "{{ksql_user}}"
    group: "{{ksql_group}}"
  notify: restart ksql
  when: ksql_authentication_type == 'basic'

- name: Create Basic Auth Password File
  template:
    src: password.properties.j2
    dest: "{{ksql.password_file}}"
    mode: 0640
    owner: "{{ksql_user}}"
    group: "{{ksql_group}}"
  notify: restart ksql
  when: ksql_authentication_type == 'basic'

- name: Create Service Override Directory
  file:
    path: "{{ksql.systemd_override | dirname}}"
    owner: "{{ksql_user}}"
    group: "{{ksql_group}}"
    state: directory
    mode: 0640
  when: privileged_install|bool

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{ksql.systemd_override}}"
    mode: "{{ omit if not privileged_install else '0640' }}"
    owner: "{{ omit if not privileged_install else ksql_user }}"
    group: "{{ omit if not privileged_install else ksql_group }}"
  notify: restart ksql

- name: Install Service in User-mode
  shell:
    cmd: "XDG_RUNTIME_DIR=/run/user/$(id -u) systemctl --user enable {{ksql.systemd_file}}"
  notify: restart ksql
  when: systemd_mode == 'user'

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart ksql
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Ksql Service
  systemd:
    name: "{{ksql_service_name}}"
    enabled: true
    state: started
    scope: "{{ 'user' if systemd_mode == 'user' else 'system' }}"

- name: Health Check
  include_tasks: health_check.yml
  when:
    - ksql_health_checks_enabled|bool
    - not ansible_check_mode

- name: Register Cluster
  include_tasks: register_cluster.yml
  when: ksql_cluster_name | length >0
